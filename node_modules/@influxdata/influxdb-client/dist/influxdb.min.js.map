{"version":3,"file":"influxdb.min.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts","../src/results/stringToLines.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {FluxTableColumn, ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer, they can setup a proxy agent or an abort signal in node.js transport that relies upon {@link https://nodejs.org/api/http.html#http_http_request_url_options_callback } */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n  gzipThreshold: 1000,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch.\n   * The current time in nanoseconds can't precisely fit into a JS number, which\n   * can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        let delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Logger} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Logger} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Logger} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Logger.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function() {}\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {ParameterizedQuery} from './query'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n} from './results'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n  /**\n   * HTTP headers that will be sent with every query request.\n   */\n  headers?: {[key: string]: string}\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Returns a new query API with extra options applied.\n   * @param options - query options to use\n   * @returns queryApi instance with the supplied options\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * QueryRaw executes a query and returns the full response as a string.\n   * Use with caution, a possibly huge stream is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of response text\n   */\n  queryRaw(query: string | ParameterizedQuery): Promise<string>\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {Cancellable, CommunicationObserver} from '../results'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {chunksToLines} from '../results'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  linesToTables,\n} from '../results'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string | QueryOptions) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, {...this.options, ...options})\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return linesToTables({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(linesToTables(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        chunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","concat","first","second","retVal","Uint8Array","length","set","copy","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","previous","chunks","finished","quoted","next","index","c","undefined","bufferReceived","e","this","error","complete","useCancellable","cancellable","self_1","cancel","isCancelled","Object","LineSplitter","_reuse","val","reusedValues","Array","reuse","line","lastSplitLength","quoteCount","startIndex","values","count","i","val_1","getValue","push","substring","replace","newFluxTableColumn","FluxTableColumnImpl","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","message","_super","_this","name","setPrototypeOf","IllegalArgumentError","prototype","__extends","Error","statusMessage","body","retryAfter","contentType","HttpError","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","duration","dateTime:RFC3339","columns","forEach","col","FluxTableMetaDataImpl","label","acc","column","defaultValue","dataType","createFluxTableMetaData","linesToTables","consumer","lastMeta","splitter","withReuse","expectMeta","firstColumnIndex","splitLine","size","group","slice","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","writeSuccess","maxRetries","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escaper","escape","measurement","tag","lastMillis","Date","now","stepsInMillis","nanos","millis_2","nanos_2","String","substr","micros","millis","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","consoleLogger","console","warn","provider","Logger","FLUX_VALUE","Symbol","fluxValue","FluxParameter","isFluxParameterLike","sanitizeString","toString","prepareRetVal","charAt","sanitizeFloat","isFinite","dot","_i","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","RegExp","isArray","map","join","symbolObservable","observable","measurementName","Point","tags","fields","isNaN","parseFloat","time","settings","fieldsLine","keys","sort","tagsLine","defaultTags","convertTime","toLineProtocol","stringify","options","success","RetryStrategyImpl","failedAttempts","delay","delay_1","min","max","currentDelay","maxLines","retryLines","RetryBuffer","lines","retryCount","closed","retryTime","nextRetryTime","origSize","newSize","newFirst","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","_a","clearTimeout","maxChunkRecords","flushFn","scheduleSend","WriteBuffer","record","flush","reset","Promise","resolve","transport","org","bucket","precision","writeOptions","httpPath","encodeURIComponent","useDefaultTags","sendOptions","method","headers","content-type","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","WriteApiImpl","attempts","self","reject","responseStatusCode","callbacks","responseStarted","_headers","onRetry","call","addLines","nextDelay","send","add","records","point","points","withRetryBuffer","finally","remaining","close","key","getResponseHeaders","response","connectionOptions","defaultHeaders","token","url","endsWith","FetchTransport","path","observer","state","data","completeCommunicationObserver","cancelled","signal","controller_1","AbortController","__assign","abort","aborted","fetch","status","text","headerError","get","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","_c","responseContentType","responseType","accept","other","request","credentials","requestDecorator","defaultRowMapping","tableMeta","toObject","executor","isClosed","QuerySubscription","noop","decorator","ObservableQuery","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","_options","TransportImpl","InfluxDB","timeout","canRetry","object","Boolean","strings","parts","partIndex","sanitized","sanitizeDateTime","val_2","logger","source","charCodeAt","use"],"mappings":"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"}